"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5728],{5203:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>h});var a=n(7462),i=(n(7294),n(3905)),o=n(2004);const l={},r="First interaction",s={unversionedId:"docs/first-interaction",id:"docs/first-interaction",title:"First interaction",description:"In this guide we will create our first interaction. If you haven't installed Typewriter yet, please follow the Installation Guide first.",source:"@site/docs/docs/03-first-interaction.mdx",sourceDirName:"docs",slug:"/docs/first-interaction",permalink:"/TypeWriter/docs/first-interaction",draft:!1,editUrl:"https://github.com/gabber235/TypeWriter/tree/main/documentation/docs/docs/03-first-interaction.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installation Guide",permalink:"/TypeWriter/docs/installation-guide"},next:{title:"Facts",permalink:"/TypeWriter/docs/facts"}},d={},h=[{value:"Opening the Web Panel",id:"opening-the-web-panel",level:2},{value:"Creating a page",id:"creating-a-page",level:2},{value:"Panel layout",id:"panel-layout",level:2},{value:"Creating first entry",id:"creating-first-entry",level:2},{value:"Creating an option",id:"creating-an-option",level:2},{value:"Adding a speaker",id:"adding-a-speaker",level:3},{value:"Connecting the entries",id:"connecting-the-entries",level:2},{value:"Testing the interaction",id:"testing-the-interaction",level:2},{value:"Looking at flower",id:"looking-at-flower",level:2},{value:"Adding dialogue",id:"adding-dialogue",level:3},{value:"Adding a conditional dialogue",id:"adding-a-conditional-dialogue",level:3},{value:"What are facts?",id:"what-are-facts",level:4},{value:"Creating a fact",id:"creating-a-fact",level:4},{value:"Adding criteria to the dialogue",id:"adding-criteria-to-the-dialogue",level:4},{value:"Adding additional dialogue",id:"adding-additional-dialogue",level:2},{value:"Next steps",id:"next-steps",level:2}],p={toc:h},c="wrapper";function g(e){let{components:t,...l}=e;return(0,i.kt)(c,(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"first-interaction"},"First interaction"),(0,i.kt)("p",null,"In this guide we will create our first interaction. If you haven't installed Typewriter yet, please follow the ",(0,i.kt)("a",{parentName:"p",href:"Installation-guide"},"Installation Guide")," first."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This guide uses the ",(0,i.kt)("a",{parentName:"p",href:"../adapters/BasicAdapter"},"Basic Adapter"),", hence it must be installed before following this guide.")),(0,i.kt)("p",null,"Let's create our first interaction. Our example interaction will look like this:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The player clicks on a flower."),(0,i.kt)("li",{parentName:"ol"},"A chat dialogue is opened, and the player is given three options.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Looking at the flower"),(0,i.kt)("li",{parentName:"ul"},"Smelling the flower"),(0,i.kt)("li",{parentName:"ul"},"And touching the flower"))),(0,i.kt)("li",{parentName:"ol"},"All options lead to some dialogue. But some behavior changes depending on the option.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Looking at the flower will have different dialogue the second time."),(0,i.kt)("li",{parentName:"ul"},"Smelling the flower will have simple dialogue."),(0,i.kt)("li",{parentName:"ul"},"Touching the flower will give the player a flower one time.")))),(0,i.kt)("p",null,"If at any point you get stuck, feel free to ask for help on our ",(0,i.kt)("a",{parentName:"p",href:"https://discord.gg/HtbKyuDDBw"},"Discord"),"."),(0,i.kt)("h2",{id:"opening-the-web-panel"},"Opening the Web Panel"),(0,i.kt)("p",null,"Before we begin creating our interaction, we need to open the web panel.\nTo do this, run ",(0,i.kt)("inlineCode",{parentName:"p"},"/typewriter connect")," in game. Then clicking the link that is given to you."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"connect-command",src:n(8404).Z,width:"352",height:"42"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"connect-book",src:n(706).Z,width:"445",height:"545"})),(0,i.kt)("p",null,"This will give you a link to the web panel. Once you have opened the web panel, it should look something like\nthis:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"panel-empty",src:n(3603).Z,width:"1920",height:"1028"})),(0,i.kt)("h2",{id:"creating-a-page"},"Creating a page"),(0,i.kt)("p",null,"Pages in typewriter represent a self-contained unit of content. Pages can be used to create a story, or to\ncreate a quest."),(0,i.kt)("p",null,"Let's create a page. To do this, click on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Add Page")," button. This will open a modal where you can create a\npage. Pages need a name which is used to identify the page and must be unique. We will call our page ",(0,i.kt)("inlineCode",{parentName:"p"},"flower"),".\nPage names are written in ",(0,i.kt)("inlineCode",{parentName:"p"},"snake_case"),", just like any other identifier in Typewriter."),(0,i.kt)(o.Z,{url:n(9916).Z,playing:!0,loop:!0,width:"100%",height:"100%",mdxType:"ReactPlayer"}),(0,i.kt)("h2",{id:"panel-layout"},"Panel layout"),(0,i.kt)("p",null,"Let's have a look at everything that is on the panel."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"panel-layout",src:n(9724).Z,width:"1920",height:"1027"})),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"The page lists"),": This is where you can see all the pages that you have created. You can also create new\npages here."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"The graph editor"),": This is where you can create the flow of your interaction. You can drag & zoom the\ngraph editor to make it easier to work with."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"The inspector"),": This is where you can edit the properties of the selected node. This is where the magic\nhappens."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"The app bar"),": There are multiple actions that we can click on. Let's check them out from left to right")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Staging indicator"),": This indicates whether you have staging changes. If the indicator is orange, it means\nthat you have changes that are not active on the server. When green, it means that the changes are active on the\nserver. We will learn more about this ",(0,i.kt)("a",{parentName:"li",href:"#testing-the-interaction"},"Here"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"View mode"),": This is where you can switch between the different view modes. There are two view modes,\ntriggers and static. These refer to the different types of entries. We will learn more about this\n",(0,i.kt)("a",{parentName:"li",href:"#adding-a-speaker"},"Here"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Search bar"),": This is where you can search for entries or create new ones. We will learn more about this\n",(0,i.kt)("a",{parentName:"li",href:"#creating-first-entry"},"Here"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Add button"),": This is where you can add new entries. This opens the search bar where you can create new\nentries.")),(0,i.kt)("h2",{id:"creating-first-entry"},"Creating first entry"),(0,i.kt)("p",null,"Let's actually start working on the interaction. To do this, we need to create an entry. An entry is a single\nunit of something. It can be a ",(0,i.kt)("inlineCode",{parentName:"p"},"dialogue"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"event"),", an ",(0,i.kt)("inlineCode",{parentName:"p"},"action"),", or anything else."),(0,i.kt)("p",null,"Let's create a ",(0,i.kt)("inlineCode",{parentName:"p"},"event")," entry that will be triggered when we click on a red tulip. To do this, click on the ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),"\nbutton in the app bar. This will open the search bar. As you can see there is already ",(0,i.kt)("inlineCode",{parentName:"p"},"add:")," written in the\nsearch bar. The search bar is smart and can filter for specific actions. To create the event, type ",(0,i.kt)("inlineCode",{parentName:"p"},"add:\ninteract with block"),". This will show you a list of entries that you can create. Click on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Add On Interact\nWith Block")," entry. This will create a new ",(0,i.kt)("inlineCode",{parentName:"p"},"event")," entry."),(0,i.kt)(o.Z,{url:n(209).Z,playing:!0,loop:!0,width:"100%",height:"100%",mdxType:"ReactPlayer"}),(0,i.kt)("p",null,"As you can see, the inspector auto selected the entry that we just created. In the inspector, there are several\nthings that we can change. Let's change the name of the entry to ",(0,i.kt)("inlineCode",{parentName:"p"},"on_flower_click"),". We can also change the block\nthat we want to interact with. To do this, click on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Block")," field. This will open a modal where you can\nselect a block. Let's select the red tulip. After this the inspector should look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"inspector-1",src:n(4263).Z,width:"431",height:"672"})),(0,i.kt)("h2",{id:"creating-an-option"},"Creating an option"),(0,i.kt)("p",null,"Currently, when we click on the red tulip, nothing happens. This is because there is no entry that gets\ntriggered when a player click on a red tulip. Let's change that. To do this, we need to create an option. An\noption is a choice that the player can make. Let's create an option that will be shown when we click on the red\ntulip. To do this, click on the ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," button in the app bar, and add an ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," entry."),(0,i.kt)("p",null,"Then change the name of the entry to ",(0,i.kt)("inlineCode",{parentName:"p"},"inspect_flower"),". Then change the text of the option to ",(0,i.kt)("inlineCode",{parentName:"p"},"What do you want\nto do?"),". After this the inspector should look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"inspector-2",src:n(8286).Z,width:"433",height:"676"})),(0,i.kt)("h3",{id:"adding-a-speaker"},"Adding a speaker"),(0,i.kt)("p",null,"Every dialogue needs a speaker. Speakers have a display name and can play a Minecraft sound when they talk.\nSpeakers are something called ",(0,i.kt)("inlineCode",{parentName:"p"},"static")," entries. ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," entries are entries that are not triggered by anything.\nThey are always active, and can be used to reference things. Let's create a ",(0,i.kt)("inlineCode",{parentName:"p"},"simple_speaker")," which is the most\nbasic version of a speaker. Give it the name of ",(0,i.kt)("inlineCode",{parentName:"p"},"flower"),", and let its display name be ",(0,i.kt)("inlineCode",{parentName:"p"},"<red><bold>Flower"),".\nThis will make the display name of the speaker red and bold using the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.adventure.kyori.net/minimessage/format.html"},"Adventure Library"),".\nAfter that, we still need to select it in\nthe inspector. To do this, click on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Speaker")," field. This will open a modal where you can select a speaker.\nSelect the ",(0,i.kt)("inlineCode",{parentName:"p"},"flower")," speaker. It should look like this:"),(0,i.kt)(o.Z,{url:n(6566).Z,playing:!0,loop:!0,width:"100%",height:"100%",mdxType:"ReactPlayer"}),(0,i.kt)("p",null,"Now we only need to put in the different options that we want the player to be able to use. Click on the ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),"\nnext to the options drop down to add a new option. Then change the text of the option to ",(0,i.kt)("inlineCode",{parentName:"p"},"Look at the flower"),",\nthen add two more options with the text ",(0,i.kt)("inlineCode",{parentName:"p"},"Smell the flower")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Touch the flower"),". After this the inspector\nshould look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"inspector-3",src:n(4455).Z,width:"431",height:"971"})),(0,i.kt)("h2",{id:"connecting-the-entries"},"Connecting the entries"),(0,i.kt)("p",null,"As you can see in the graph page, the entries are not yet connected. Entries can trigger next entries by\nclicking on the purple selection next to the triggers field. This will put in a mode where you can select all\nthe entries that you want to trigger. When you are done you can click finish to connect them up. It should look\nsomething like:"),(0,i.kt)(o.Z,{url:n(6676).Z,playing:!0,loop:!0,width:"100%",height:"100%",mdxType:"ReactPlayer"}),(0,i.kt)("h2",{id:"testing-the-interaction"},"Testing the interaction"),(0,i.kt)("p",null,"To test our changes we need to publish them to the server. We can do this by hovering over the staging button"),(0,i.kt)("p",null,"and clicking the publish button."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"publish-changes",src:n(5160).Z,width:"194",height:"52"})),(0,i.kt)("admonition",{title:"Note",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"We do ",(0,i.kt)("strong",{parentName:"p"},"not")," have to restart the server. Publishing changes is instant and will be active immediately.")),(0,i.kt)("p",null,"If we now go in-game we will see the following when we click on a red tulip it will show us the three options:"),(0,i.kt)(o.Z,{url:n(2380).Z,playing:!0,loop:!0,width:"100%",height:"100%",mdxType:"ReactPlayer"}),(0,i.kt)("h2",{id:"looking-at-flower"},"Looking at flower"),(0,i.kt)("h3",{id:"adding-dialogue"},"Adding dialogue"),(0,i.kt)("p",null,"When the player wants to look at the flower we want to display some dialogue. Try to add a ",(0,i.kt)("inlineCode",{parentName:"p"},"spoken")," dialogue\nentry. Rename it to ",(0,i.kt)("inlineCode",{parentName:"p"},"look_at_flower_initialy"),", add the text ",(0,i.kt)("inlineCode",{parentName:"p"},"That flower looks <red><bold>Beautiful</bold></red>"),"\nselect our ",(0,i.kt)("inlineCode",{parentName:"p"},"flower")," speaker we created earlier, and finally specify a duration of ",(0,i.kt)("inlineCode",{parentName:"p"},"1s")," for one second that the\nmessage will be animated. Finally, connect the ",(0,i.kt)("inlineCode",{parentName:"p"},"look_at_flower_initialy")," entry to the ",(0,i.kt)("inlineCode",{parentName:"p"},"inspect_flower")," entry."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"It is important that you use the specific trigger from the correct option. The first ",(0,i.kt)("inlineCode",{parentName:"p"},"triggers")," field are for\nglobal triggers.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"inspector-4",src:n(6830).Z,width:"410",height:"692"})),(0,i.kt)("p",null,"When you publish the changes. In the game it should look something like this:"),(0,i.kt)(o.Z,{url:n(2644).Z,playing:!0,loop:!0,width:"100%",height:"100%",mdxType:"ReactPlayer"}),(0,i.kt)("h3",{id:"adding-a-conditional-dialogue"},"Adding a conditional dialogue"),(0,i.kt)("p",null,"Currently, every time we pick the ",(0,i.kt)("inlineCode",{parentName:"p"},"Look at the flower")," option, we will get the same dialogue. This will get\nboring very quickly. Let's fix it by introducing a new concept called ",(0,i.kt)("inlineCode",{parentName:"p"},"Facts"),"."),(0,i.kt)("h4",{id:"what-are-facts"},"What are facts?"),(0,i.kt)("p",null,"Facts are a way to store information for each player. Every fact is a separate entry and can only store one\ninteger per player. When an entry gets triggered we can check if a player meets a certain condition for a given\nfact. Only if the player meets the condition, will the entry get triggered. Then an entry can modify any facts\nvalue for that player."),(0,i.kt)("p",null,'There are different types of facts. Each type of fact changes when a player "forgets" a fact. Aka when a player\nlogs out, after a certain amount of time, or never. When a player forgets a fact, the value of the fact will be\nreset to the default value 0.'),(0,i.kt)("h4",{id:"creating-a-fact"},"Creating a fact"),(0,i.kt)("p",null,"To create a fact, click on the ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," button in the app bar, and add a ",(0,i.kt)("inlineCode",{parentName:"p"},"permanent_fact")," entry. Then change the name\nof the entry to ",(0,i.kt)("inlineCode",{parentName:"p"},"looked_at_flower"),". We can add a comment describing the fact and how it is used. After this the\ninspector should look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"inspector-5",src:n(8055).Z,width:"416",height:"382"})),(0,i.kt)("h4",{id:"adding-criteria-to-the-dialogue"},"Adding criteria to the dialogue"),(0,i.kt)("p",null,"Now that we have created the fact we want to add a criterion to the dialogue. A criterion is a condition that\nneeds to be met for the dialogue to be triggered. To add a criterion, click on the ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," button next to the\ncriteria drop down. Then select the ",(0,i.kt)("inlineCode",{parentName:"p"},"looked_at_flower")," fact, and keep the rest the same. We also want to modify\nthis fact when the dialogue gets triggered. To do this, click on the ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," button next to the modifications drop\ndown. Then select the ",(0,i.kt)("inlineCode",{parentName:"p"},"looked_at_flower")," fact, make the modification ",(0,i.kt)("inlineCode",{parentName:"p"},"=")," and the value ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),". After this the\ninspector should look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"inspector-6",src:n(3733).Z,width:"422",height:"907"})),(0,i.kt)("p",null,"Now we can create a new ",(0,i.kt)("inlineCode",{parentName:"p"},"spoken")," dialogue entry that will be triggered when the player looks at the flower for\nthe sequential times. Rename it to ",(0,i.kt)("inlineCode",{parentName:"p"},"look_at_flower_second_time"),", add the text ",(0,i.kt)("inlineCode",{parentName:"p"},"You look at the flower again. It\nis still <red><bold>Beautiful</bold></red>"),",select our ",(0,i.kt)("inlineCode",{parentName:"p"},"flower")," speaker we created earlier, and finally specify a\nduration of ",(0,i.kt)("inlineCode",{parentName:"p"},"1s")," that the message will be animated. Connect it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"inspect_flower")," entry as a trigger for\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"look at the flower")," option."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"We actually don't need to set any criteria on the ",(0,i.kt)("inlineCode",{parentName:"p"},"look_at_flower_second_time")," dialogue entry. Typewriter picks the next\ndialogue to be the dialogue by sorting all the next dialogue entries from most amount of criteria to least. Then picking the first one which has all the criteria met.\nIn this case ",(0,i.kt)("inlineCode",{parentName:"p"},"look_at_flower_initialy")," has one criterion, and ",(0,i.kt)("inlineCode",{parentName:"p"},"look_at_flower_second_time")," has none."),(0,i.kt)("p",{parentName:"admonition"},"So ",(0,i.kt)("inlineCode",{parentName:"p"},"look_at_flower_initialy")," will be picked when the player has not looked at the flower.")),(0,i.kt)("p",null,"The UI should look something like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"panel-looked",src:n(7703).Z,width:"1920",height:"1027"})),(0,i.kt)("p",null,"When you publish the changes. In the game it should look something like this:"),(0,i.kt)(o.Z,{url:n(5896).Z,playing:!0,loop:!0,width:"100%",height:"100%",mdxType:"ReactPlayer"}),(0,i.kt)("h2",{id:"adding-additional-dialogue"},"Adding additional dialogue"),(0,i.kt)("p",null,"Now that we have added the first two dialogue entries, we can add the rest of the dialogue. We can add the\nfollowing dialogue entries:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"smell_flower")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"You smell the flower. It smells <blue><bold>Fragrant</bold></blue>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"touch_flower")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"You touch the flower. It feels <yellow><bold>Soft</bold></yellow>"))),(0,i.kt)("p",null,"With the ",(0,i.kt)("inlineCode",{parentName:"p"},"touch_flower")," you can add a ",(0,i.kt)("inlineCode",{parentName:"p"},"give_item")," entry after it, which gives the player a ",(0,i.kt)("inlineCode",{parentName:"p"},"red_tulip"),".\nIf you add another ",(0,i.kt)("inlineCode",{parentName:"p"},"fact")," named ",(0,i.kt)("inlineCode",{parentName:"p"},"given_flower")," and add a criterion & modifier to the ",(0,i.kt)("inlineCode",{parentName:"p"},"give_item")," entry, you can\nmake it so that the player can only get the flower once."),(0,i.kt)("p",null,"If you are not able to make it work, try reading parts again or go to our\n",(0,i.kt)("a",{parentName:"p",href:"https://discord.gg/HtbKyuDDBw"},"Discord")," and ask for help."),(0,i.kt)("p",null,"Finally, the UI should look something like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"panel-final",src:n(270).Z,width:"1920",height:"1026"})),(0,i.kt)("p",null,"When you publish the changes. In the game it should look something like this:"),(0,i.kt)(o.Z,{url:n(1671).Z,playing:!0,loop:!0,width:"100%",height:"100%",mdxType:"ReactPlayer"}),(0,i.kt)("h2",{id:"next-steps"},"Next steps"),(0,i.kt)("p",null,"Now that you have completed the first interaction, try to create a new interaction. Think of a story you want to\ntell, and try to create it in Typewriter. If you are stuck, you can always ask for help on our\n",(0,i.kt)("a",{parentName:"p",href:"https://discord.gg/HtbKyuDDBw"},"Discord"),". Or if you have any suggestions feel free to reach out!"))}g.isMDXComponent=!0},9916:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/medias/add-page-c38533dbe97414d27e8f554398475b72.webm"},6676:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/medias/connect-entries-51f5d502c85ae09572abb3402433d20d.webm"},209:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/medias/create-event-da8fcdea6763777b9b1d27087ac91da2.webm"},6566:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/medias/create-speaker-8e92dd74111b21431409b53b6cd86cff.webm"},2380:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/medias/game-1-2a2364af7793b8707d3b32e9bdcd67c3.webm"},2644:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/medias/game-2-49786759121baf1f3a10f2612909e16f.webm"},5896:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/medias/game-3-14bf3a0b76f77eba36e8918890e29096.webm"},1671:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/medias/game-4-e6bbb783836914855e5f865c69e51ea3.webm"},706:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/connect-book-1c4fb811f5ead6dfbb164e5c7dc22889.png"},8404:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/connect-command-00f3ad6eb18bd0022adde6278b4cfab7.gif"},4263:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inspector-1-c5255f16fc5bec4798fcb7d1f2da49a7.png"},8286:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inspector-2-0fd4b2f4488b2904df28ba2571d26032.png"},4455:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inspector-3-a82d571f48bc5c91c6435093bd1e8f50.png"},6830:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inspector-4-de1d5f155e9bf6e770aac50e4b06e468.png"},8055:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inspector-5-8e605bcff54a1dcb535321422bf82fbc.png"},3733:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inspector-6-9c1f0b7a6e10f485d168356a41400449.png"},3603:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/panel-empty-7e891f0858793409bfb8afc63223d13f.png"},270:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/panel-final-8152d9e7a320f09518161ccba14e7ca5.png"},9724:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/panel-layout-da427f1a4a31677a4629479c7d41511f.png"},7703:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/panel-looked-8f653ee3f68f8dc3465bc090731dfbef.png"},5160:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/publish-changes-499b1597059faeadd744ccc83854213f.gif"}}]);